
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace mngInven_draws2data_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 68> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 16, column 4 to column 56)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 17, column 4 to column 64)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 18, column 4 to column 37)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 21, column 4 to column 42)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 22, column 4 to column 48)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 23, column 4 to column 50)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 24, column 4 to column 119)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 26, column 4 to column 30)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 27, column 4 to column 39)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 28, column 4 to column 41)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 29, column 4 to column 51)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 30, column 4 to column 57)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 32, column 4 to column 161)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 33, column 4 to column 54)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 34, column 4 to column 56)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 35, column 4 to column 66)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 36, column 4 to column 72)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 38, column 4 to column 109)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 39, column 4 to column 77)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 5, column 4 to column 12)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 6, column 4 to column 15)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 10, column 4 to column 28)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 11, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 11, column 4 to column 100)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 32, column 32 to column 35)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 33, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 34, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 35, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 36, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 3, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 6, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 7, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 8, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 9, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 11, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 12, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 13, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 14, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 15, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 16, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 17, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 18, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 19, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 20, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 21, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 22, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 23, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 24, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 25, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 26, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 27, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 28, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 29, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 30, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 31, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 32, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 33, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 34, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 35, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 36, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 37, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 39, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 40, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 41, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 42, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 44, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_functions.stan', line 2, column 117, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/mngInven_draws2data.stan', line 2, column 0)"};

struct vensim_ode_func_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>, -1, 1>
  operator()(const T0__& time, const T1__& outcome,
             const T2__& inventory_adjustment_time,
             const T3__& minimum_order_processing_time, std::ostream* pstream__) const;
};
struct vensim_ode_func_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>, -1, 1>
  operator()(const T0__& time, const T1__& outcome, std::ostream* pstream__,
             const T2__& inventory_adjustment_time,
             const T3__& minimum_order_processing_time) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>, -1, 1>
  vensim_ode_func(const T0__& time, const T1__& outcome_arg__,
                  const T2__& inventory_adjustment_time,
                  const T3__& minimum_order_processing_time,
                  std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& outcome = stan::math::to_ref(outcome_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> dydt =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4, DUMMY_VAR__);
      local_scalar_t__ backlog = DUMMY_VAR__;
      current_statement__ = 31;
      backlog = stan::model::rvalue(outcome, "outcome",
                  stan::model::index_uni(1));
      local_scalar_t__ inventory = DUMMY_VAR__;
      current_statement__ = 32;
      inventory = stan::model::rvalue(outcome, "outcome",
                    stan::model::index_uni(2));
      local_scalar_t__ expected_order_rate = DUMMY_VAR__;
      current_statement__ = 33;
      expected_order_rate = stan::model::rvalue(outcome, "outcome",
                              stan::model::index_uni(3));
      local_scalar_t__ work_in_process_inventory = DUMMY_VAR__;
      current_statement__ = 34;
      work_in_process_inventory = stan::model::rvalue(outcome, "outcome",
                                    stan::model::index_uni(4));
      local_scalar_t__ initial_customer_order_rate = DUMMY_VAR__;
      current_statement__ = 35;
      initial_customer_order_rate = 0.5;
      local_scalar_t__ customer_order_rate = DUMMY_VAR__;
      current_statement__ = 36;
      customer_order_rate = stan::math::fmax(0, initial_customer_order_rate);
      local_scalar_t__ target_delivery_delay = DUMMY_VAR__;
      current_statement__ = 37;
      target_delivery_delay = 2;
      local_scalar_t__ desired_shipment_rate = DUMMY_VAR__;
      current_statement__ = 38;
      desired_shipment_rate = (backlog / target_delivery_delay);
      local_scalar_t__ manufacturing_cycle_time = DUMMY_VAR__;
      current_statement__ = 39;
      manufacturing_cycle_time = 8;
      local_scalar_t__ production_rate = DUMMY_VAR__;
      current_statement__ = 40;
      production_rate = (work_in_process_inventory /
                          manufacturing_cycle_time);
      local_scalar_t__ maximum_shipment_rate = DUMMY_VAR__;
      current_statement__ = 41;
      maximum_shipment_rate = (inventory / minimum_order_processing_time);
      local_scalar_t__ order_fulfillment_ratio = DUMMY_VAR__;
      current_statement__ = 42;
      order_fulfillment_ratio = stan::math::fmin(
                                  (maximum_shipment_rate /
                                    desired_shipment_rate), 1);
      local_scalar_t__ shipment_rate = DUMMY_VAR__;
      current_statement__ = 43;
      shipment_rate = (desired_shipment_rate * order_fulfillment_ratio);
      local_scalar_t__ safety_stock_coverage = DUMMY_VAR__;
      current_statement__ = 44;
      safety_stock_coverage = 2;
      local_scalar_t__ desired_inventory_coverage = DUMMY_VAR__;
      current_statement__ = 45;
      desired_inventory_coverage = (minimum_order_processing_time +
                                     safety_stock_coverage);
      local_scalar_t__ desired_inventory = DUMMY_VAR__;
      current_statement__ = 46;
      desired_inventory = (desired_inventory_coverage * expected_order_rate);
      local_scalar_t__ inventory_dydt = DUMMY_VAR__;
      current_statement__ = 47;
      inventory_dydt = (production_rate - shipment_rate);
      local_scalar_t__ time_to_average_order_rate = DUMMY_VAR__;
      current_statement__ = 48;
      time_to_average_order_rate = 8;
      local_scalar_t__ change_in_exp_orders = DUMMY_VAR__;
      current_statement__ = 49;
      change_in_exp_orders = (customer_order_rate -
                               (expected_order_rate /
                                 time_to_average_order_rate));
      local_scalar_t__ expected_order_rate_dydt = DUMMY_VAR__;
      current_statement__ = 50;
      expected_order_rate_dydt = change_in_exp_orders;
      local_scalar_t__ order_rate = DUMMY_VAR__;
      current_statement__ = 51;
      order_rate = customer_order_rate;
      local_scalar_t__ order_fulfillment_rate = DUMMY_VAR__;
      current_statement__ = 52;
      order_fulfillment_rate = shipment_rate;
      local_scalar_t__ backlog_dydt = DUMMY_VAR__;
      current_statement__ = 53;
      backlog_dydt = (order_rate - order_fulfillment_rate);
      local_scalar_t__ wip_adjustment_time = DUMMY_VAR__;
      current_statement__ = 54;
      wip_adjustment_time = 2;
      local_scalar_t__ adjustment_from_inventory = DUMMY_VAR__;
      current_statement__ = 55;
      adjustment_from_inventory = (desired_inventory -
                                    (inventory / inventory_adjustment_time));
      local_scalar_t__ desired_production = DUMMY_VAR__;
      current_statement__ = 56;
      desired_production = stan::math::fmax(0,
                             (expected_order_rate +
                               adjustment_from_inventory));
      local_scalar_t__ desired_wip = DUMMY_VAR__;
      current_statement__ = 57;
      desired_wip = (manufacturing_cycle_time * desired_production);
      local_scalar_t__ adjustment_for_wip = DUMMY_VAR__;
      current_statement__ = 58;
      adjustment_for_wip = (desired_wip -
                             (work_in_process_inventory /
                               wip_adjustment_time));
      local_scalar_t__ desired_production_start_rate = DUMMY_VAR__;
      current_statement__ = 59;
      desired_production_start_rate = (desired_production +
                                        adjustment_for_wip);
      local_scalar_t__ production_start_rate = DUMMY_VAR__;
      current_statement__ = 60;
      production_start_rate = stan::math::fmax(0,
                                desired_production_start_rate);
      local_scalar_t__ work_in_process_inventory_dydt = DUMMY_VAR__;
      current_statement__ = 61;
      work_in_process_inventory_dydt = (production_start_rate -
                                         production_rate);
      current_statement__ = 62;
      stan::model::assign(dydt, backlog_dydt,
        "assigning variable dydt", stan::model::index_uni(1));
      current_statement__ = 63;
      stan::model::assign(dydt, inventory_dydt,
        "assigning variable dydt", stan::model::index_uni(2));
      current_statement__ = 64;
      stan::model::assign(dydt, expected_order_rate_dydt,
        "assigning variable dydt", stan::model::index_uni(3));
      current_statement__ = 65;
      stan::model::assign(dydt, work_in_process_inventory_dydt,
        "assigning variable dydt", stan::model::index_uni(4));
      current_statement__ = 66;
      return dydt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>, -1, 1>
vensim_ode_func_functor__::operator()(const T0__& time, const T1__& outcome,
                                      const T2__& inventory_adjustment_time,
                                      const T3__& minimum_order_processing_time,
                                      std::ostream* pstream__)  const
{
  return vensim_ode_func(time, outcome, inventory_adjustment_time,
           minimum_order_processing_time, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__>, -1, 1>
vensim_ode_func_odefunctor__::operator()(const T0__& time,
                                         const T1__& outcome,
                                         std::ostream* pstream__,
                                         const T2__& inventory_adjustment_time,
                                         const T3__& minimum_order_processing_time) 
const
{
  return vensim_ode_func(time, outcome, inventory_adjustment_time,
           minimum_order_processing_time, pstream__);
}


class mngInven_draws2data_model final : public model_base_crtp<mngInven_draws2data_model> {

 private:
  int n_t;
  int n_firm;
  double initial_time;
  std::vector<double> times; 
  
 
 public:
  ~mngInven_draws2data_model() { }
  
  inline std::string model_name() const final { return "mngInven_draws2data_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths=/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files"};
  }
  
  
  mngInven_draws2data_model(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mngInven_draws2data_model_namespace::mngInven_draws2data_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","n_t","int",
           std::vector<size_t>{});
      n_t = std::numeric_limits<int>::min();
      
      
      current_statement__ = 20;
      n_t = context__.vals_i("n_t")[(1 - 1)];
      current_statement__ = 21;
      context__.validate_dims("data initialization","n_firm","int",
           std::vector<size_t>{});
      n_firm = std::numeric_limits<int>::min();
      
      
      current_statement__ = 21;
      n_firm = context__.vals_i("n_firm")[(1 - 1)];
      current_statement__ = 22;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 22;
      initial_time = 0.0;
      current_statement__ = 23;
      stan::math::validate_non_negative_index("times", "n_t", n_t);
      current_statement__ = 24;
      times = 
        std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 24;
      stan::model::assign(times, std::vector<double>{1, 2, 3, 4, 5, 6, 7, 8,
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
        "assigning variable times");
      current_statement__ = 25;
      stan::math::validate_non_negative_index("integrated_result", "n_t", n_t);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("backlog", "n_t", n_t);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("inventory", "n_t", n_t);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("expected_order_rate", "n_t",
                                              n_t);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("work_in_process_inventory",
                                              "n_t", n_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mngInven_draws2data_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mngInven_draws2data_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double inventory_adjustment_time =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      inventory_adjustment_time = stan::math::normal_rng(2, 0.4, base_rng__);
      double minimum_order_processing_time =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      minimum_order_processing_time = stan::math::normal_rng(0.05, 0.01,
                                        base_rng__);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      phi = stan::math::inv_gamma_rng(2, 0.1, base_rng__);
      double backlog__init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      backlog__init = (stan::math::fmax(0, 0.5) * 2);
      double inventory__init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      inventory__init = (2 + (2 * stan::math::fmax(0, 0.5)));
      double expected_order_rate__init =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      expected_order_rate__init = stan::math::fmax(0, 0.5);
      double work_in_process_inventory__init =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      work_in_process_inventory__init = (8 *
                                          stan::math::fmax(0,
                                            ((((stan::math::fmax(0, 0.5) + 2)
                                                +
                                                (2 *
                                                  stan::math::fmax(0, 0.5)))
                                               - 2) +
                                              ((2 * stan::math::fmax(0, 0.5))
                                                / 8))));
      Eigen::Matrix<double, -1, 1> initial_outcome =
         Eigen::Matrix<double, -1, 1>::Constant(4,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      stan::model::assign(initial_outcome, backlog__init,
        "assigning variable initial_outcome", stan::model::index_uni(1));
      current_statement__ = 10;
      stan::model::assign(initial_outcome, inventory__init,
        "assigning variable initial_outcome", stan::model::index_uni(2));
      current_statement__ = 11;
      stan::model::assign(initial_outcome, expected_order_rate__init,
        "assigning variable initial_outcome", stan::model::index_uni(3));
      current_statement__ = 12;
      stan::model::assign(initial_outcome, work_in_process_inventory__init,
        "assigning variable initial_outcome", stan::model::index_uni(4));
      std::vector<Eigen::Matrix<double, -1, 1>> integrated_result =
         std::vector<Eigen::Matrix<double, -1, 1>>(n_t, 
           Eigen::Matrix<double, -1, 1>::Constant(4,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 13;
      stan::model::assign(integrated_result,
        stan::math::ode_rk45(vensim_ode_func_odefunctor__(), initial_outcome,
          initial_time, times, pstream__, inventory_adjustment_time,
          minimum_order_processing_time),
        "assigning variable integrated_result");
      std::vector<double> backlog =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      stan::model::assign(backlog,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable backlog");
      std::vector<double> inventory =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      stan::model::assign(inventory,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable inventory");
      std::vector<double> expected_order_rate =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      stan::model::assign(expected_order_rate,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(3)),
        "assigning variable expected_order_rate");
      std::vector<double> work_in_process_inventory =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      stan::model::assign(work_in_process_inventory,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(4)),
        "assigning variable work_in_process_inventory");
      Eigen::Matrix<double, -1, 1> work_in_process_inventory_obs =
         Eigen::Matrix<double, -1, 1>::Constant(20,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      stan::model::assign(work_in_process_inventory_obs,
        stan::math::to_vector(
          stan::math::neg_binomial_2_rng(work_in_process_inventory, phi,
            base_rng__)), "assigning variable work_in_process_inventory_obs");
      Eigen::Matrix<double, -1, 1> inventory_obs =
         Eigen::Matrix<double, -1, 1>::Constant(20,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(inventory_obs,
        stan::math::to_vector(
          stan::math::neg_binomial_2_rng(inventory, phi, base_rng__)),
        "assigning variable inventory_obs");
      out__.write(inventory_adjustment_time);
      out__.write(minimum_order_processing_time);
      out__.write(phi);
      out__.write(backlog__init);
      out__.write(inventory__init);
      out__.write(expected_order_rate__init);
      out__.write(work_in_process_inventory__init);
      out__.write(initial_outcome);
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
          out__.write(integrated_result[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(backlog);
      out__.write(inventory);
      out__.write(expected_order_rate);
      out__.write(work_in_process_inventory);
      out__.write(work_in_process_inventory_obs);
      out__.write(inventory_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"inventory_adjustment_time",
      "minimum_order_processing_time", "phi", "backlog__init",
      "inventory__init", "expected_order_rate__init",
      "work_in_process_inventory__init", "initial_outcome",
      "integrated_result", "backlog", "inventory", "expected_order_rate",
      "work_in_process_inventory", "work_in_process_inventory_obs",
      "inventory_obs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(n_t), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(20)},
      std::vector<size_t>{static_cast<size_t>(20)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "inventory_adjustment_time");
      param_names__.emplace_back(std::string() + "minimum_order_processing_time");
      param_names__.emplace_back(std::string() + "phi");
      param_names__.emplace_back(std::string() + "backlog__init");
      param_names__.emplace_back(std::string() + "inventory__init");
      param_names__.emplace_back(std::string() + "expected_order_rate__init");
      param_names__.emplace_back(std::string() + "work_in_process_inventory__init");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "backlog" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "expected_order_rate" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "work_in_process_inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "work_in_process_inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "inventory_adjustment_time");
      param_names__.emplace_back(std::string() + "minimum_order_processing_time");
      param_names__.emplace_back(std::string() + "phi");
      param_names__.emplace_back(std::string() + "backlog__init");
      param_names__.emplace_back(std::string() + "inventory__init");
      param_names__.emplace_back(std::string() + "expected_order_rate__init");
      param_names__.emplace_back(std::string() + "work_in_process_inventory__init");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "backlog" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "expected_order_rate" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "work_in_process_inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "work_in_process_inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"inventory_adjustment_time\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"minimum_order_processing_time\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"backlog__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"expected_order_rate__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"generated_quantities\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"backlog\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"expected_order_rate\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"},{\"name\":\"inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"inventory_adjustment_time\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"minimum_order_processing_time\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"backlog__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"expected_order_rate__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "},\"block\":\"generated_quantities\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"backlog\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"expected_order_rate\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"work_in_process_inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"},{\"name\":\"inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 4) + (n_t * 4)) + n_t) +
        n_t) + n_t) + n_t) + 20) + 20);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 4) + (n_t * 4)) + n_t) +
        n_t) + n_t) + n_t) + 20) + 20);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = mngInven_draws2data_model_namespace::mngInven_draws2data_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mngInven_draws2data_model_namespace::profiles__;
}

#endif


