
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace Ali_draws2data_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 92> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 15, column 4 to column 52)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 16, column 4 to column 47)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 19, column 4 to column 30)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 21, column 4 to column 30)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 22, column 4 to column 41)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 24, column 4 to column 126)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 25, column 4 to column 56)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 27, column 4 to column 79)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 5, column 4 to column 12)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 9, column 4 to column 28)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 10, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 10, column 4 to column 100)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 21, column 11 to column 12)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 24, column 32 to column 35)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 24, column 11 to column 12)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 25, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 4, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 5, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 63, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 64, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 65, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 62, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 62, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 58, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 59, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 60, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 57, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 57, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 53, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 54, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 55, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 52, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 52, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 48, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 49, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 50, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 47, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 47, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 43, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 44, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 45, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 42, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 42, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 38, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 39, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 40, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 37, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 37, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 33, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 34, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 35, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 32, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 32, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 28, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 29, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 30, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 27, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 27, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 23, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 24, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 25, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 22, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 22, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 18, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 19, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 20, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 17, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 17, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 13, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 14, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 15, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 12, column 21, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 12, column 9, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 8, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 9, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 10, column 8, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 7, column 16, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 7, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 67, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 1, column 52, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 72, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 75, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 77, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 78, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 79, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 80, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 81, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 82, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 84, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 86, column 4, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)",
 " (in '/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_functions.stan', line 71, column 77, included from\n'/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files/Ali_draws2data.stan', line 2, column 0)"};

struct lookupFunc__table_for_order_fulfillment_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& x, std::ostream* pstream__) const;
};
struct vensim_ode_func_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>, -1, 1>
  operator()(const T0__& time, const T1__& outcome,
             const T2__& maximum_shipment_rate, std::ostream* pstream__) const;
};
struct vensim_ode_func_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>, -1, 1>
  operator()(const T0__& time, const T1__& outcome, std::ostream* pstream__,
             const T2__& maximum_shipment_rate) const;
};

template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  lookupFunc__table_for_order_fulfillment(const T0__& x,
                                          std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ slope = DUMMY_VAR__;
      local_scalar_t__ intercept = DUMMY_VAR__;
      current_statement__ = 78;
      if (stan::math::logical_lte(x, 0.2)) {
        current_statement__ = 74;
        intercept = 0.0;
        current_statement__ = 75;
        slope = ((0.2 - 0.0) / (0.2 - 0.0));
        current_statement__ = 76;
        return (intercept + (slope * (x - 0.0)));
      } else {
        current_statement__ = 73;
        if (stan::math::logical_lte(x, 0.4)) {
          current_statement__ = 69;
          intercept = 0.2;
          current_statement__ = 70;
          slope = ((0.4 - 0.2) / (0.4 - 0.2));
          current_statement__ = 71;
          return (intercept + (slope * (x - 0.2)));
        } else {
          current_statement__ = 68;
          if (stan::math::logical_lte(x, 0.6)) {
            current_statement__ = 64;
            intercept = 0.4;
            current_statement__ = 65;
            slope = ((0.58 - 0.4) / (0.6 - 0.4));
            current_statement__ = 66;
            return (intercept + (slope * (x - 0.4)));
          } else {
            current_statement__ = 63;
            if (stan::math::logical_lte(x, 0.8)) {
              current_statement__ = 59;
              intercept = 0.58;
              current_statement__ = 60;
              slope = ((0.73 - 0.58) / (0.8 - 0.6));
              current_statement__ = 61;
              return (intercept + (slope * (x - 0.6)));
            } else {
              current_statement__ = 58;
              if (stan::math::logical_lte(x, 1.0)) {
                current_statement__ = 54;
                intercept = 0.73;
                current_statement__ = 55;
                slope = ((0.85 - 0.73) / (1.0 - 0.8));
                current_statement__ = 56;
                return (intercept + (slope * (x - 0.8)));
              } else {
                current_statement__ = 53;
                if (stan::math::logical_lte(x, 1.2)) {
                  current_statement__ = 49;
                  intercept = 0.85;
                  current_statement__ = 50;
                  slope = ((0.93 - 0.85) / (1.2 - 1.0));
                  current_statement__ = 51;
                  return (intercept + (slope * (x - 1.0)));
                } else {
                  current_statement__ = 48;
                  if (stan::math::logical_lte(x, 1.4)) {
                    current_statement__ = 44;
                    intercept = 0.93;
                    current_statement__ = 45;
                    slope = ((0.97 - 0.93) / (1.4 - 1.2));
                    current_statement__ = 46;
                    return (intercept + (slope * (x - 1.2)));
                  } else {
                    current_statement__ = 43;
                    if (stan::math::logical_lte(x, 1.6)) {
                      current_statement__ = 39;
                      intercept = 0.97;
                      current_statement__ = 40;
                      slope = ((0.99 - 0.97) / (1.6 - 1.4));
                      current_statement__ = 41;
                      return (intercept + (slope * (x - 1.4)));
                    } else {
                      current_statement__ = 38;
                      if (stan::math::logical_lte(x, 1.8)) {
                        current_statement__ = 34;
                        intercept = 0.99;
                        current_statement__ = 35;
                        slope = ((1.0 - 0.99) / (1.8 - 1.6));
                        current_statement__ = 36;
                        return (intercept + (slope * (x - 1.6)));
                      } else {
                        current_statement__ = 33;
                        if (stan::math::logical_lte(x, 2.0)) {
                          current_statement__ = 29;
                          intercept = 1.0;
                          current_statement__ = 30;
                          slope = ((1.0 - 1.0) / (2.0 - 1.8));
                          current_statement__ = 31;
                          return (intercept + (slope * (x - 1.8)));
                        } else {
                          current_statement__ = 28;
                          if (stan::math::logical_lte(x, 2.0)) {
                            current_statement__ = 24;
                            intercept = 1.0;
                            current_statement__ = 25;
                            slope = ((1.0 - 1.0) / (2.0 - 2.0));
                            current_statement__ = 26;
                            return (intercept + (slope * (x - 2.0)));
                          } else {
                            current_statement__ = 23;
                            if (stan::math::logical_lte(x, 4.0)) {
                              current_statement__ = 19;
                              intercept = 1.0;
                              current_statement__ = 20;
                              slope = ((1.0 - 1.0) / (4.0 - 2.0));
                              current_statement__ = 21;
                              return (intercept + (slope * (x - 2.0)));
                            } 
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 79;
      return 1.0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>, -1, 1>
  vensim_ode_func(const T0__& time, const T1__& outcome_arg__,
                  const T2__& maximum_shipment_rate, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>;
    int current_statement__ = 0; 
    const auto& outcome = stan::math::to_ref(outcome_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> dydt =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(1, DUMMY_VAR__);
      local_scalar_t__ inventory = DUMMY_VAR__;
      current_statement__ = 82;
      inventory = stan::model::rvalue(outcome, "outcome",
                    stan::model::index_uni(1));
      local_scalar_t__ minimum_order_processing_time = DUMMY_VAR__;
      current_statement__ = 83;
      minimum_order_processing_time = 0.1;
      local_scalar_t__ production_rate = DUMMY_VAR__;
      current_statement__ = 84;
      production_rate = 100;
      local_scalar_t__ desired_shipment = DUMMY_VAR__;
      current_statement__ = 85;
      desired_shipment = 100;
      local_scalar_t__ order_fulfillment_ratio = DUMMY_VAR__;
      current_statement__ = 86;
      order_fulfillment_ratio = lookupFunc__table_for_order_fulfillment(
                                  (maximum_shipment_rate / desired_shipment), pstream__);
      local_scalar_t__ shipment_rate = DUMMY_VAR__;
      current_statement__ = 87;
      shipment_rate = (desired_shipment * order_fulfillment_ratio);
      local_scalar_t__ inventory_dydt = DUMMY_VAR__;
      current_statement__ = 88;
      inventory_dydt = (production_rate - shipment_rate);
      current_statement__ = 89;
      stan::model::assign(dydt, inventory_dydt,
        "assigning variable dydt", stan::model::index_uni(1));
      current_statement__ = 90;
      return dydt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
lookupFunc__table_for_order_fulfillment_functor__::operator()(const T0__& x,
                                                              std::ostream* pstream__) 
const
{
  return lookupFunc__table_for_order_fulfillment(x, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>, -1, 1>
vensim_ode_func_functor__::operator()(const T0__& time, const T1__& outcome,
                                      const T2__& maximum_shipment_rate,
                                      std::ostream* pstream__)  const
{
  return vensim_ode_func(time, outcome, maximum_shipment_rate, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>, -1, 1>
vensim_ode_func_odefunctor__::operator()(const T0__& time,
                                         const T1__& outcome,
                                         std::ostream* pstream__,
                                         const T2__& maximum_shipment_rate) 
const
{
  return vensim_ode_func(time, outcome, maximum_shipment_rate, pstream__);
}


class Ali_draws2data_model final : public model_base_crtp<Ali_draws2data_model> {

 private:
  int n_t;
  double initial_time;
  std::vector<double> times; 
  
 
 public:
  ~Ali_draws2data_model() { }
  
  inline std::string model_name() const final { return "Ali_draws2data_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths=/Users/hyunjimoon/Dropbox/tolzul/BayesSD/ContinuousCode/5_BayesCalib/stan_files"};
  }
  
  
  Ali_draws2data_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "Ali_draws2data_model_namespace::Ali_draws2data_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","n_t","int",
           std::vector<size_t>{});
      n_t = std::numeric_limits<int>::min();
      
      
      current_statement__ = 9;
      n_t = context__.vals_i("n_t")[(1 - 1)];
      current_statement__ = 10;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 10;
      initial_time = 0.0;
      current_statement__ = 11;
      stan::math::validate_non_negative_index("times", "n_t", n_t);
      current_statement__ = 12;
      times = 
        std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 12;
      stan::model::assign(times, std::vector<double>{1, 2, 3, 4, 5, 6, 7, 8,
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
        "assigning variable times");
      current_statement__ = 13;
      stan::math::validate_non_negative_index("initial_outcome", "1", 1);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("integrated_result", "n_t", n_t);
      current_statement__ = 15;
      stan::math::validate_non_negative_index("integrated_result", "1", 1);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("inventory", "n_t", n_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Ali_draws2data_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "Ali_draws2data_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double maximum_shipment_rate =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      maximum_shipment_rate = stan::math::normal_rng(2, 0.4, base_rng__);
      double m_noise_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      m_noise_scale = stan::math::inv_gamma_rng(2, 0.1, base_rng__);
      double inventory__init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      inventory__init = 20;
      Eigen::Matrix<double, -1, 1> initial_outcome =
         Eigen::Matrix<double, -1, 1>::Constant(1,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      stan::model::assign(initial_outcome, inventory__init,
        "assigning variable initial_outcome", stan::model::index_uni(1));
      std::vector<Eigen::Matrix<double, -1, 1>> integrated_result =
         std::vector<Eigen::Matrix<double, -1, 1>>(n_t, 
           Eigen::Matrix<double, -1, 1>::Constant(1,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      stan::model::assign(integrated_result,
        stan::math::ode_rk45(vensim_ode_func_odefunctor__(), initial_outcome,
          initial_time, times, pstream__, maximum_shipment_rate),
        "assigning variable integrated_result");
      std::vector<double> inventory =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      stan::model::assign(inventory,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable inventory");
      Eigen::Matrix<double, -1, 1> inventory_obs =
         Eigen::Matrix<double, -1, 1>::Constant(20,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      stan::model::assign(inventory_obs,
        stan::math::to_vector(
          stan::math::normal_rng(inventory, m_noise_scale, base_rng__)),
        "assigning variable inventory_obs");
      out__.write(maximum_shipment_rate);
      out__.write(m_noise_scale);
      out__.write(inventory__init);
      out__.write(initial_outcome);
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
          out__.write(integrated_result[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(inventory);
      out__.write(inventory_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"maximum_shipment_rate",
      "m_noise_scale", "inventory__init", "initial_outcome",
      "integrated_result", "inventory", "inventory_obs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(1)},
      std::vector<size_t>{static_cast<size_t>(n_t), static_cast<size_t>(1)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(20)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "maximum_shipment_rate");
      param_names__.emplace_back(std::string() + "m_noise_scale");
      param_names__.emplace_back(std::string() + "inventory__init");
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "maximum_shipment_rate");
      param_names__.emplace_back(std::string() + "m_noise_scale");
      param_names__.emplace_back(std::string() + "inventory__init");
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inventory_obs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"maximum_shipment_rate\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_noise_scale\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"generated_quantities\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"generated_quantities\"},{\"name\":\"inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"maximum_shipment_rate\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"m_noise_scale\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"inventory__init\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"generated_quantities\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"generated_quantities\"},{\"name\":\"inventory\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inventory_obs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(20) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((1 + 1) + 1) + 1) + (n_t * 1)) + n_t) + 20);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((1 + 1) + 1) + 1) + (n_t * 1)) + n_t) + 20);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = Ali_draws2data_model_namespace::Ali_draws2data_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return Ali_draws2data_model_namespace::profiles__;
}

#endif


