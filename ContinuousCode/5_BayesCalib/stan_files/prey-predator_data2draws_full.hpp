
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace prey_predator_data2draws_full_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 51> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 18, column 4 to column 15)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 19, column 4 to column 15)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 20, column 4 to column 14)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 21, column 4 to column 15)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 22, column 4 to column 15)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 27, column 4 to column 28)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 28, column 4 to column 25)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 30, column 4 to column 30)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 34, column 4 to column 130)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 35, column 4 to column 55)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 36, column 4 to column 51)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 31, column 4 to column 40)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 32, column 4 to column 36)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 50, column 4 to column 17)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 51, column 4 to column 75)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 52, column 4 to column 67)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 54, column 4 to column 60)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 55, column 4 to column 60)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 40, column 4 to column 29)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 41, column 4 to column 29)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 42, column 4 to column 31)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 43, column 4 to column 32)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 44, column 4 to column 47)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 45, column 4 to column 46)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 46, column 4 to column 38)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 6, column 4 to column 20)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 7, column 4 to column 12)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 8, column 4 to column 28)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 9, column 4 to column 24)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 13, column 4 to column 28)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 14, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 14, column 4 to column 100)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 34, column 32 to column 35)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 35, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 36, column 10 to column 13)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 51, column 11 to column 14)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 52, column 11 to column 14)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 3, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 6, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 7, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 9, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 10, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 11, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 12, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 13, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 14, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 16, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 17, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 19, column 4, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)",
 " (in '/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_functions.stan', line 2, column 96, included from\n'/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files/prey-predator_data2draws_full.stan', line 2, column 4)"};

struct vensim_ode_func_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& time, const T1__& outcome, const T2__& gamma,
             const T3__& beta, const T4__& delta, const T5__& alpha,
             std::ostream* pstream__) const;
};
struct vensim_ode_func_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& time, const T1__& outcome, std::ostream* pstream__,
             const T2__& gamma, const T3__& beta, const T4__& delta,
             const T5__& alpha) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
  vensim_ode_func(const T0__& time, const T1__& outcome_arg__,
                  const T2__& gamma, const T3__& beta, const T4__& delta,
                  const T5__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& outcome = stan::math::to_ref(outcome_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> dydt =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      local_scalar_t__ predator = DUMMY_VAR__;
      current_statement__ = 39;
      predator = stan::model::rvalue(outcome, "outcome",
                   stan::model::index_uni(1));
      local_scalar_t__ prey = DUMMY_VAR__;
      current_statement__ = 40;
      prey = stan::model::rvalue(outcome, "outcome",
               stan::model::index_uni(2));
      local_scalar_t__ predator_death_rate = DUMMY_VAR__;
      current_statement__ = 41;
      predator_death_rate = (gamma * predator);
      local_scalar_t__ predator_birth_rate = DUMMY_VAR__;
      current_statement__ = 42;
      predator_birth_rate = ((delta * prey) * predator);
      local_scalar_t__ predator_dydt = DUMMY_VAR__;
      current_statement__ = 43;
      predator_dydt = (predator_birth_rate - predator_death_rate);
      local_scalar_t__ prey_birth_rate = DUMMY_VAR__;
      current_statement__ = 44;
      prey_birth_rate = (alpha * prey);
      local_scalar_t__ prey_death_rate = DUMMY_VAR__;
      current_statement__ = 45;
      prey_death_rate = ((beta * predator) * prey);
      local_scalar_t__ prey_dydt = DUMMY_VAR__;
      current_statement__ = 46;
      prey_dydt = (prey_birth_rate - prey_death_rate);
      current_statement__ = 47;
      stan::model::assign(dydt, predator_dydt,
        "assigning variable dydt", stan::model::index_uni(1));
      current_statement__ = 48;
      stan::model::assign(dydt, prey_dydt,
        "assigning variable dydt", stan::model::index_uni(2));
      current_statement__ = 49;
      return dydt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
vensim_ode_func_functor__::operator()(const T0__& time, const T1__& outcome,
                                      const T2__& gamma, const T3__& beta,
                                      const T4__& delta, const T5__& alpha,
                                      std::ostream* pstream__)  const
{
  return vensim_ode_func(time, outcome, gamma, beta, delta, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
vensim_ode_func_odefunctor__::operator()(const T0__& time,
                                         const T1__& outcome,
                                         std::ostream* pstream__,
                                         const T2__& gamma, const T3__& beta,
                                         const T4__& delta, const T5__& alpha) 
const
{
  return vensim_ode_func(time, outcome, gamma, beta, delta, alpha, pstream__);
}


class prey_predator_data2draws_full_model final : public model_base_crtp<prey_predator_data2draws_full_model> {

 private:
  int n_obs_state;
  int n_t;
  Eigen::Matrix<double, -1, 1> predator_obs_data__;
  Eigen::Matrix<double, -1, 1> prey_obs_data__;
  double initial_time;
  std::vector<double> times; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> predator_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> prey_obs{nullptr, 0};
 
 public:
  ~prey_predator_data2draws_full_model() { }
  
  inline std::string model_name() const final { return "prey_predator_data2draws_full_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths=/Users/hyunjimoon/Dropbox/BayesSD/ContinuousCode/explore/stan_files"};
  }
  
  
  prey_predator_data2draws_full_model(stan::io::var_context& context__,
                                      unsigned int random_seed__ = 0,
                                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "prey_predator_data2draws_full_model_namespace::prey_predator_data2draws_full_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","n_obs_state","int",
           std::vector<size_t>{});
      n_obs_state = std::numeric_limits<int>::min();
      
      
      current_statement__ = 26;
      n_obs_state = context__.vals_i("n_obs_state")[(1 - 1)];
      current_statement__ = 27;
      context__.validate_dims("data initialization","n_t","int",
           std::vector<size_t>{});
      n_t = std::numeric_limits<int>::min();
      
      
      current_statement__ = 27;
      n_t = context__.vals_i("n_t")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","predator_obs","double",
           std::vector<size_t>{static_cast<size_t>(20)});
      predator_obs_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(20,
          std::numeric_limits<double>::quiet_NaN());
      new (&predator_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(predator_obs_data__.data(), 20);
        
      
      {
        std::vector<local_scalar_t__> predator_obs_flat__;
        current_statement__ = 28;
        predator_obs_flat__ = context__.vals_r("predator_obs");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
          current_statement__ = 28;
          stan::model::assign(predator_obs, predator_obs_flat__[(pos__ - 1)],
            "assigning variable predator_obs", stan::model::index_uni(sym1__));
          current_statement__ = 28;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      context__.validate_dims("data initialization","prey_obs","double",
           std::vector<size_t>{static_cast<size_t>(20)});
      prey_obs_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(20,
          std::numeric_limits<double>::quiet_NaN());
      new (&prey_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(prey_obs_data__.data(), 20);
        
      
      {
        std::vector<local_scalar_t__> prey_obs_flat__;
        current_statement__ = 29;
        prey_obs_flat__ = context__.vals_r("prey_obs");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= 20; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(prey_obs, prey_obs_flat__[(pos__ - 1)],
            "assigning variable prey_obs", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 30;
      initial_time = 0.0;
      current_statement__ = 31;
      stan::math::validate_non_negative_index("times", "n_t", n_t);
      current_statement__ = 32;
      times = 
        std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 32;
      stan::model::assign(times, std::vector<double>{1, 2, 3, 4, 5, 6, 7, 8,
        9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
        "assigning variable times");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("integrated_result", "n_t", n_t);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("predator", "n_t", n_t);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("prey", "n_t", n_t);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("predator_tilde", "n_t", n_t);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("prey_tilde", "n_t", n_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "prey_predator_data2draws_full_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 2;
      gamma = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 3;
      beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 5;
      sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ predator__init = DUMMY_VAR__;
      current_statement__ = 6;
      predator__init = 4;
      local_scalar_t__ prey__init = DUMMY_VAR__;
      current_statement__ = 7;
      prey__init = 30;
      Eigen::Matrix<local_scalar_t__, -1, 1> initial_outcome =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(initial_outcome, predator__init,
        "assigning variable initial_outcome", stan::model::index_uni(1));
      current_statement__ = 13;
      stan::model::assign(initial_outcome, prey__init,
        "assigning variable initial_outcome", stan::model::index_uni(2));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> integrated_result =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_t, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 9;
      stan::model::assign(integrated_result,
        stan::math::ode_rk45(vensim_ode_func_odefunctor__(), initial_outcome,
          initial_time, times, pstream__, gamma, beta, delta, alpha),
        "assigning variable integrated_result");
      std::vector<local_scalar_t__> predator =
         std::vector<local_scalar_t__>(n_t, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(predator,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable predator");
      std::vector<local_scalar_t__> prey =
         std::vector<local_scalar_t__>(n_t, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(prey,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable prey");
      {
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0.8, 0.1));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0.8, 0.1));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0.05, 0.001));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(delta, 0.05, 0.001));
        current_statement__ = 23;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(sigma, -4.605170185988091,
            0.1));
        current_statement__ = 24;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(predator_obs, predator, sigma));
        current_statement__ = 25;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(prey_obs, prey, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "prey_predator_data2draws_full_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      double gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      gamma = in__.template read<local_scalar_t__>();
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta = in__.template read<local_scalar_t__>();
      double delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      delta = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma = in__.template read<local_scalar_t__>();
      double predator__init = std::numeric_limits<double>::quiet_NaN();
      double prey__init = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> initial_outcome =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> integrated_result =
         std::vector<Eigen::Matrix<double, -1, 1>>(n_t, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> predator =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> prey =
         std::vector<double>(n_t, std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(gamma);
      out__.write(beta);
      out__.write(delta);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      predator__init = 4;
      current_statement__ = 7;
      prey__init = 30;
      current_statement__ = 12;
      stan::model::assign(initial_outcome, predator__init,
        "assigning variable initial_outcome", stan::model::index_uni(1));
      current_statement__ = 13;
      stan::model::assign(initial_outcome, prey__init,
        "assigning variable initial_outcome", stan::model::index_uni(2));
      current_statement__ = 9;
      stan::model::assign(integrated_result,
        stan::math::ode_rk45(vensim_ode_func_odefunctor__(), initial_outcome,
          initial_time, times, pstream__, gamma, beta, delta, alpha),
        "assigning variable integrated_result");
      current_statement__ = 10;
      stan::model::assign(predator,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable predator");
      current_statement__ = 11;
      stan::model::assign(prey,
        stan::model::rvalue(integrated_result, "integrated_result",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable prey");
      if (emit_transformed_parameters__) {
        out__.write(predator__init);
        out__.write(prey__init);
        out__.write(initial_outcome);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            out__.write(integrated_result[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(predator);
        out__.write(prey);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double log_lik = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> predator_tilde =
         Eigen::Matrix<double, -1, 1>::Constant(n_t,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      stan::model::assign(predator_tilde,
        stan::math::to_vector(
          stan::math::lognormal_rng(predator, sigma, base_rng__)),
        "assigning variable predator_tilde");
      Eigen::Matrix<double, -1, 1> prey_tilde =
         Eigen::Matrix<double, -1, 1>::Constant(n_t,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      stan::model::assign(prey_tilde,
        stan::math::to_vector(
          stan::math::lognormal_rng(prey, sigma, base_rng__)),
        "assigning variable prey_tilde");
      current_statement__ = 17;
      log_lik = (log_lik +
                  stan::math::lognormal_lpdf<false>(predator_obs, predator,
                    sigma));
      current_statement__ = 18;
      log_lik = (log_lik +
                  stan::math::lognormal_lpdf<false>(predator_obs, predator,
                    sigma));
      out__.write(log_lik);
      out__.write(predator_tilde);
      out__.write(prey_tilde);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ gamma = DUMMY_VAR__;
      gamma = in__.read<local_scalar_t__>();
      out__.write(gamma);
      local_scalar_t__ beta = DUMMY_VAR__;
      beta = in__.read<local_scalar_t__>();
      out__.write(beta);
      local_scalar_t__ delta = DUMMY_VAR__;
      delta = in__.read<local_scalar_t__>();
      out__.write(delta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "gamma", "beta", "delta",
      "sigma", "predator__init", "prey__init", "initial_outcome",
      "integrated_result", "predator", "prey", "log_lik", "predator_tilde",
      "prey_tilde"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(n_t), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(n_t)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n_t)},
      std::vector<size_t>{static_cast<size_t>(n_t)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "predator__init");
      param_names__.emplace_back(std::string() + "prey__init");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "predator" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prey" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_lik");
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "predator_tilde" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prey_tilde" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "predator__init");
      param_names__.emplace_back(std::string() + "prey__init");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_outcome" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "integrated_result" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "predator" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prey" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_lik");
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "predator_tilde" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prey_tilde" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predator__init\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prey__init\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"predator\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"prey\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predator_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_t) + "},\"block\":\"generated_quantities\"},{\"name\":\"prey_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_t) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predator__init\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"prey__init\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"initial_outcome\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"integrated_result\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"predator\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"prey\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"predator_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_t) + "},\"block\":\"generated_quantities\"},{\"name\":\"prey_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_t) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((1 + 1) + 2) + (n_t * 2)) + n_t) + n_t);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((1 + n_t) + n_t);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((1 + 1) + 2) + (n_t * 2)) + n_t) + n_t);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((1 + n_t) + n_t);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"alpha", "gamma", "beta",
      "delta", "sigma"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = prey_predator_data2draws_full_model_namespace::prey_predator_data2draws_full_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return prey_predator_data2draws_full_model_namespace::profiles__;
}

#endif


